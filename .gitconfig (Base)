[alias]

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --graph --oneline --decorate --date=relative -n 20 --all
    lol = log --graph --oneline --decorate --date=relative -n 20 --all

    # Fetch and have Git automatically prune all stale remote refs
    f = "!f() { git fetch -p ${1-origin}; }; f"

    #
    # Locale branches
    #

    # A summary of all local branches with their tracking branch and status (ahead/behind)
    b = "!f() { git fetch --all && git branch -vv; }; f "
    branches = "!f() { git fetch --all && git branch -vv; }; f "

    # Cleanup local branches (current=HEAD, dev and master cannot be deleted)
    # that have already been merged into the current branch (i.e. HEAD)
    # a.k.a. ‘delete merged branches’

    # Delete merged branches (dmb)
    dmb = "!git branch --merged | grep -v '\\*\\|dev\\|develop\\|master' | xargs -n 1 git branch -d"
    # Dry run of dmb
    dmbn = "!git branch --merged | grep -v '\\*\\|dev\\|develop\\|master' | xargs -n 1 echo"

    #  1) git branch --merged ${1-dev} lists all the branches that have been merged
    #  into the specified branch (or dev if none is specified).
    #  2) The grep command will list all merged branches that are not dev, master or the specified branch itself.
    #dm = "!f() { git branch --merged ${1-dev}$ | grep -v '${1-dev}$|dev|develop|master' | xargs -r git branch -d; }; f"
    #dmn = "!f() { git branch --merged ${1-dev}$ | grep -v '${1-dev}$|dev|develop|master' | xargs -r echo; }; f"

    #
    # Remote branches (refs/remotes/)
    #

    # show all remote branches
    rb = "!f() { \
        for branch in `git branch -r | grep -v HEAD`; \
        do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` $branch; \
        done | sort -r; \
    }; f"

    # show remote branches that have been merged into the current HEAD
    # (and decide if any should be deleted: git push origin --delete branch-name)
    rbm = "!f() { \
        for branch in `git branch -r --merged | grep -v HEAD`; \
        do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` $branch; \
        done | sort -r; \
    }; f"

    # show remote branches that have not been merged into the current HEAD
    rbnm = "!f() { \
        for branch in `git branch -r --no-merged | grep -v HEAD`; \
        do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` $branch; \
        done | sort -r; \
    }; f"

    # After each git pull or git fetch command Git creates references to remote branches
    # in local repository, but doesn’t clean up stale references.
    # Delete remote branches (prune all stale remote refs)
    drb = "!f() { git remote prune ${1-origin}; }; f"

    #
    # Show tags, remotes, aliases, status
    #

    # Show verbose output about tags
    tags = tag -l
    # Show verbose output about remotes
    remotes = remote -v
    # List all aliases in config
    alias = "!f() { git config --get-regexp '^alias.'; }; f"
    # List all aliases in config (cutting out 'alias.' part such that sorting is possible)
    aliases = "!git config -l | grep '^alias.' | cut -c 7- | sort"

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it (possibly as a local tracking branch) if necessary
    go = "!f() { git checkout \"$1\" 2> /dev/null || git checkout -b \"$1\"; }; f"

    # Switch to a feature branch, creating it (possibly as a local tracking branch) if necessary
    gof = "!f() { \
        branch_name="$1"; \
        if [[ ! "$branch_name" =~ ^feature/.* ]]; then \
            branch_name="feature/${branch_name}"; \
        fi; \
        git checkout \"${branch_name}\" 2> /dev/null || git checkout -b \"${branch_name}\"; \
    }; f"

    # Switch to a hotfix branch, creating it (possibly as a local tracking branch) if necessary
    goh = "!f() { \
        branch_name="$1"; \
        if [[ ! "$branch_name" =~ ^hotfix/.* ]]; then \
            branch_name="hotfix/${branch_name}"; \
        fi; \
        git checkout \"${branch_name}\" 2> /dev/null || git checkout -b \"${branch_name}\"; \
    }; f"

    # Switch to a support branch, creating it (possibly as a local tracking branch) if necessary
    gos = "!f() { \
        branch_name="$1"; \
        if [[ ! "$branch_name" =~ ^support/.* ]]; then \
            branch_name="support/${branch_name}"; \
        fi; \
        git checkout \"${branch_name}\" 2> /dev/null || git checkout -b \"${branch_name}\"; \
    }; f"

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits (i.e. history rewriting before push)
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Interactive rebase to a parent branch (i.e. history rewriting before push)
    rebb = "!r() { git rebase -i $(git merge-base HEAD ${1-dev}); }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Merge branch into current HEAD as distinct commit (no FF)
    m = "!f() { git merge --no-ff --edit $1; }; f"

    # merge feature branch into dev branch (TODO: Maybe 1) fetch initially,
    # checking we are not behind, and 2) delete the remote feature branch,
    # if it exists on github/upstream)
    mfb = "!f() { \
        branch_name="$1"; \
        if [[ ! "$branch_name" =~ ^feature/.* ]]; then \
            branch_name="feature/${branch_name}"; \
        fi; \
        git checkout dev && \
        git merge --no-ff --edit "${branch_name}" && \
        git branch -d "${branch_name}"; \
    }; f"

    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[diff]

    # Detect copies as well as renames
    renames = copies

    tool = bcomp

[difftool]

    prompt = false

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true

    tool = bcomp

[mergetool]

    prompt = false

[push]
    # push the current branch back to the branch whose changes are usually integrated
    # into the current branch (which is called @{upstream}) with the added safety to
    # refuse to push if the upstream branch’s name is different from the local one.
    # This mode only makes sense if you are pushing to the same repository you would normally
    # pull from (i.e. central workflow).
    default = simple
    # enable --follow-tags option by default. You may override this configuration at push time
    # by specifying --no-follow-tags.
    followTags = true

# URL shorthands

[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"

[user]
  name = maxild
  email = mmaxild@gmail.com
